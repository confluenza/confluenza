"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[855],{386:function(n,s,a){a.r(s);var e=a(2322),t=a(5392),o=a(4252);function c(n){const s=Object.assign({p:"p",a:"a",div:"div",blockquote:"blockquote",em:"em",h2:"h2"},(0,t.ah)(),n.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(s.p,{children:[(0,e.jsx)(s.a,{href:"https://mdxjs.com",children:"MDX"})," allows you to use JSX directly in your Markdown documents."]}),"\n",(0,e.jsx)(s.p,{children:"Imagine, you are documenting a component. Wouldn't it be nice to actually show a working component\ndirectly in your Markdown document? I mean, not a screenshot, or code snippet, but real rendered\ncomponent. MDX makes it possible."}),"\n",(0,e.jsx)(s.p,{children:"Below you see a component that renders its content with a border of the given thickness."}),"\n",(0,e.jsx)(o.q,{thickness:5,children:(0,e.jsxs)(s.p,{children:["This text should appear in a border ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">5px</code>'}})," thick."]})}),"\n",(0,e.jsx)(s.p,{children:"This component is imported as any other regular react component with:"}),"\n",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> WithBorder <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../components/mdx"</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",(0,e.jsxs)(s.blockquote,{children:["\n",(0,e.jsxs)(s.p,{children:["The import statement must be placed directly after ",(0,e.jsx)(s.em,{children:"frontmatter"})," if one is used."]}),"\n"]}),"\n",(0,e.jsx)(o.m,{}),"\n",(0,e.jsxs)(s.h2,{id:"enabling-mdx-support-in-confluenza",style:{position:"relative"},children:[(0,e.jsx)(s.a,{href:"#enabling-mdx-support-in-confluenza","aria-label":"enabling mdx support in confluenza permalink",className:"anchor before",children:(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})}),"Enabling MDX support in Confluenza"]}),"\n",(0,e.jsxs)(s.p,{children:["In Confluenza, you can use MDX documents the same way you use regular Markdown documents.\nIf you want your MDX document to be visible to Confluenza, just make sure it has a valid\nfrontmatter with a ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">path</code>'}}),", ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">title</code>'}}),", and ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">tag</code>'}}),". For MDX documents, Confluenza does not\nsupport the ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">content</code>'}})," frontmatter attribute, but you can still import external content\ninto your MDX documents the way we show above by using a regular javascript ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">import</code>'}})," statement."]}),"\n",(0,e.jsxs)(s.h2,{id:"when-you-do-not-have-any-mdx-documents",style:{position:"relative"},children:[(0,e.jsx)(s.a,{href:"#when-you-do-not-have-any-mdx-documents","aria-label":"when you do not have any mdx documents permalink",className:"anchor before",children:(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})}),"When you do not have any MDX documents"]}),"\n",(0,e.jsx)(s.p,{children:"Because of how Gatsby works, when there are no MDX documents,\nneither MDX nodes nor the corresponding GraphQL types will be created. This will make Gatsby failing."}),"\n",(0,e.jsxs)(s.p,{children:["There are two solutions: first, make sure you do have MDX content. Just create a ",(0,e.jsx)(s.em,{children:"dummy"})," MDX document\nwith a frontmatter similar to this one:"]}),"\n",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="markdown"><pre class="language-markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>\n<span class="token front-matter yaml language-yaml">path: /dummy\ntitle: Dummy\ntag: dummy</span>\n<span class="token punctuation">---</span></span></code></pre></div>'}}),"\n",(0,e.jsxs)(s.p,{children:["The values do not relly matter, just make sure they do not conflict with your actual content and that ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">path</code>'}}),",\n",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">title</code>'}}),", and ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">tag</code>'}})," attributes are defined."]}),"\n",(0,e.jsxs)(s.p,{children:["Another approach would be add the following to your site's ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gatsby-config.js</code>'}}),":"]}),"\n",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">exports<span class="token punctuation">.</span><span class="token function-variable function">createSchemaCustomization</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> actions <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> createTypes<span class="token punctuation">,</span> createFieldExtension <span class="token punctuation">}</span> <span class="token operator">=</span> actions<span class="token punctuation">;</span>\n  <span class="token function">createFieldExtension</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"noMdx"</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">extend</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> args<span class="token punctuation">,</span> context<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">[</span>info<span class="token punctuation">.</span>fieldName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">defaultFieldResolver</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> args<span class="token punctuation">,</span> context<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> typeDefs <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    type Mdx implements Node @infer {\n      frontmatter: MdxFrontmatter,\n    }\n    type MdxFrontmatter @infer {\n      title: String @noMdx,\n      path: String @noMdx,\n      tag: String @noMdx\n    }\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token function">createTypes</span><span class="token punctuation">(</span>typeDefs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",(0,e.jsxs)(s.p,{children:["Here we basicaly make sure that ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Mdx</code>'}})," and ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">MdxFrontmatter</code>'}})," are defined with ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">title</code>'}}),", ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">path</code>'}}),", and ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">tag</code>'}}),"."]}),"\n",(0,e.jsxs)(s.blockquote,{children:["\n",(0,e.jsxs)(s.p,{children:["Unfortunatley, we could not just add this to ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gatsby-node.js</code>'}})," of the ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gatsby-theme-confluenza</code>'}})," package.\nIt would work in a source plugin, but is not allowed in themes."]}),"\n"]}),"\n",(0,e.jsxs)(s.blockquote,{children:["\n",(0,e.jsxs)(s.p,{children:["You will experience similar problems when your site has MDX but no single Markdown content.\nThis is far less probable that there is no single Markdown document in your source tree,\nbut in such a case, just make sure, you add a dummy Markdown file,\nor you use a similar hack that we show above working for ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Mdx</code>'}})," and ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">MdxFrontmatter</code>'}})," schema types."]}),"\n"]}),"\n",(0,e.jsxs)(s.p,{children:[(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gatsby-theme-confluenza</code>'}})," also provides an option to disable support for MDX:"]}),"\n",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>\n  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token string">\'@confluenza/gatsby-theme-confluenza\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">mdx</span><span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",(0,e.jsxs)(s.p,{children:["Notice though that you still\nneed to make sure that ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Mdx</code>'}})," and ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">MdxFrontmatter</code>'}})," schema types are created - so even in the case you turn\nsupport for MDX off, you still need to either use a dummy file, or update the GraphQL schema types in\nyour ",(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gatsby-node.js</code>'}}),"."]}),"\n",(0,e.jsxs)(s.h2,{id:"emoji",style:{position:"relative"},children:[(0,e.jsx)(s.a,{href:"#emoji","aria-label":"emoji permalink",className:"anchor before",children:(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})}),"EMOJI"]}),"\n",(0,e.jsx)(s.p,{children:"Confluenza MDX supports slack-style emoji: 🎉, 😻."})]})}s.default=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.ah)(),n.components);return s?(0,e.jsx)(s,Object.assign({},n,{children:(0,e.jsx)(c,n)})):c(n)}},4252:function(n,s,a){a.d(s,{m:function(){return c},q:function(){return l}});var e=a(2322),t=a(5392);function o(n){const s=Object.assign({h2:"h2",a:"a",div:"div",p:"p",blockquote:"blockquote",em:"em"},(0,t.ah)(),n.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(s.h2,{id:"importing-mdx-files",style:{position:"relative"},children:[(0,e.jsx)(s.a,{href:"#importing-mdx-files","aria-label":"importing mdx files permalink",className:"anchor before",children:(0,e.jsx)(s.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})}),"Importing MDX files"]}),"\n",(0,e.jsx)(s.p,{children:"Besides importing components from regular Javascript files, you can also directly import other MDX documents."}),"\n",(0,e.jsxs)(s.blockquote,{children:["\n",(0,e.jsxs)(s.p,{children:["Currently, Confluenza does not include the headings from the imported MDX files in the navigation menu.\nThe ",(0,e.jsx)(s.em,{children:"Importing MDX files"})," header above will not show up in the navigation menu."]}),"\n"]})]})}var c=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.ah)(),n.components);return s?(0,e.jsx)(s,Object.assign({},n,{children:(0,e.jsx)(o,n)})):o(n)};const l=(0,a(894).Z)("div",{target:"eyvuqg20"})((n=>{let{thickness:s=1}=n;return{padding:"25px",marginBottom:"25px",border:s+"px solid black"}}),"")},5392:function(n,s,a){a.d(s,{ah:function(){return o}});var e=a(2784);const t=e.createContext({});function o(n){const s=e.useContext(t);return e.useMemo((()=>"function"==typeof n?n(s):{...s,...n}),[s,n])}}}]);
//# sourceMappingURL=d8fbe2b346d7d0bc21b7053b6cc9f749efc68bc3-c3d41ff5d9cd04b39f37.js.map