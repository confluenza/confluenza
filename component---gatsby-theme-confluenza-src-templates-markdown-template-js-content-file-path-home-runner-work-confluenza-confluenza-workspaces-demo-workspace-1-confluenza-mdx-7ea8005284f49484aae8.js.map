{"version":3,"file":"component---gatsby-theme-confluenza-src-templates-markdown-template-js-content-file-path-home-runner-work-confluenza-confluenza-workspaces-demo-workspace-1-confluenza-mdx-7ea8005284f49484aae8.js","mappings":"2NAIA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,IACHC,IAAK,MACLC,WAAY,aACZC,GAAI,OACHC,EAAAA,EAAAA,MAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACF,EAAAA,EAAAA,MAAMV,EAAYG,EAAG,CAC9BS,SAAU,EAACC,EAAAA,EAAAA,KAAKb,EAAYI,EAAG,CAC7BU,KAAM,oBACNF,SAAU,QACR,iEACF,MAAMC,EAAAA,EAAAA,KAAKb,EAAYG,EAAG,CAC5BS,SAAU,4OACR,MAAMC,EAAAA,EAAAA,KAAKb,EAAYG,EAAG,CAC5BS,SAAU,6FACR,MAAMC,EAAAA,EAAAA,KAAKE,EAAAA,EAAY,CACzBC,UAAW,EACXJ,UAAUF,EAAAA,EAAAA,MAAMV,EAAYG,EAAG,CAC7BS,SAAU,CAAC,wCAAwCC,EAAAA,EAAAA,KAAKb,EAAYK,IAAK,CACvEY,wBAAyB,CACvBC,OAAQ,4CAER,eAEJ,MAAML,EAAAA,EAAAA,KAAKb,EAAYG,EAAG,CAC5BS,SAAU,0EACR,MAAMC,EAAAA,EAAAA,KAAKb,EAAYK,IAAK,CAC9BY,wBAAyB,CACvBC,OAAQ,scAER,MAAMR,EAAAA,EAAAA,MAAMV,EAAYM,WAAY,CACtCM,SAAU,CAAC,MAAMF,EAAAA,EAAAA,MAAMV,EAAYG,EAAG,CACpCS,SAAU,CAAC,uDAAuDC,EAAAA,EAAAA,KAAKb,EAAYO,GAAI,CACrFK,SAAU,gBACR,sBACF,QACF,MAAMC,EAAAA,EAAAA,KAAKM,EAAAA,EAAuB,IAAK,MAAMT,EAAAA,EAAAA,MAAMV,EAAYM,WAAY,CAC7EM,SAAU,CAAC,MAAMF,EAAAA,EAAAA,MAAMV,EAAYG,EAAG,CACpCS,SAAU,CAAC,mMAAmMC,EAAAA,EAAAA,KAAKb,EAAYO,GAAI,CACjOK,SAAU,kBACR,yCACF,WAUV,MANA,SAAoBb,QAAY,IAAZA,IAAAA,EAAQ,IAC1B,MAAOqB,QAASC,GAAapB,OAAOC,OAAO,IAAIM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOY,GAAYR,EAAAA,EAAAA,KAAKQ,EAAWpB,OAAOC,OAAO,GAAIH,EAAO,CAC1Da,UAAUC,EAAAA,EAAAA,KAAKf,EAAmBC,MAC9BD,EAAkBC,I,UCnD1B,MAAMuB,EAAW,IAAsB,IAArB,gBAAOV,GAAc,EACrC,MAAOW,MAAM,aAACC,GAAR,UAA4BC,GAAlC,GACM,YAACC,GAAP,EACA,KAAS,CACP,MAAOC,UAAWC,gBAAiBC,GAAmBC,aAAa,MAACC,IAApE,EACA,OAAO,2BAAiC,qBAA8B,CACpEF,iBADoE,EAEpEH,YAAaA,IACXM,EAAAA,cAAAA,KAAAA,KAHG,GAAP,GAIK,CACL,MAAM,0BAAyBF,aAAa,gBAAQG,IAApD,EACA,OAAO,2BAAiC,qBAA8B,CACpEJ,iBADoE,EAEpEK,gBAFoE,EAGpER,YAAaA,IACXM,EAAAA,cAAAA,KAAAA,KAJG,GAIqC,sBAA2B,CACrEf,wBAAyB,CACvBC,OAAQe,EAAUA,EAAAA,oBAAAA,KAAAA,MAAAA,MAAAA,MAAAA,GAAAA,KAAH,MAAsEE,KAErFF,GAAAA,KAAWE,GAAe,sBAA2B,CACvDlB,wBAAyB,CACvBC,OAAQiB,QA2CHC,EAAO,IAAY,IAAX,KAACC,GAAU,EAC9B,MAAM,UAAMZ,GAAZ,EACA,OAAO,gBAAoBO,EAAAA,SAApB,KAA0CA,EAAAA,cAAAA,QAAAA,KAAmCP,EAAMA,EAAAA,YAAH,MAA2Ba,EAAAA,YAA3G,OAAmI,uBAA4B,CACpKC,KADoK,WAEpKN,QAAS,6DACP,uBAA4B,CAC9BnB,KAD8B,mEAE9B0B,IAAK,iBAIM,SAASC,EAAiB1C,GACvC,OAAOiC,EAAAA,cAAAA,EAAAA,EAAqCA,EAAAA,cAAAA,EAA5C,M,oGC9EF,SAASlC,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCwC,GAAI,KACJtC,EAAG,IACHC,IAAK,MACLF,EAAG,IACHG,WAAY,aACZC,GAAI,OACHC,EAAAA,EAAAA,MAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CACtBC,SAAU,EAACF,EAAAA,EAAAA,MAAMV,EAAY0C,GAAI,CAC/BC,GAAI,sBACJC,MAAO,CACLC,SAAU,YAEZjC,SAAU,EAACC,EAAAA,EAAAA,KAAKb,EAAYI,EAAG,CAC7BU,KAAM,uBACN,aAAc,gCACdgC,UAAW,gBACXlC,UAAUC,EAAAA,EAAAA,KAAKb,EAAYK,IAAK,CAC9BY,wBAAyB,CACvBC,OAAQ,oeAGV,yBACF,MAAML,EAAAA,EAAAA,KAAKb,EAAYG,EAAG,CAC5BS,SAAU,kHACR,MAAMF,EAAAA,EAAAA,MAAMV,EAAYM,WAAY,CACtCM,SAAU,CAAC,MAAMF,EAAAA,EAAAA,MAAMV,EAAYG,EAAG,CACpCS,SAAU,CAAC,iHAAiHC,EAAAA,EAAAA,KAAKb,EAAYO,GAAI,CAC/IK,SAAU,wBACR,4DACF,WAUV,MANA,SAAoBb,QAAY,IAAZA,IAAAA,EAAQ,IAC1B,MAAOqB,QAASC,GAAapB,OAAOC,OAAO,IAAIM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOY,GAAYR,EAAAA,EAAAA,KAAKQ,EAAWpB,OAAOC,OAAO,GAAIH,EAAO,CAC1Da,UAAUC,EAAAA,EAAAA,KAAKf,EAAmBC,MAC9BD,EAAkBC,ICzC1B,MAAMgB,GAAa,E,OAAA,+BAAW,QAAC,UAAEC,EAAY,GAAf,QAAwB,CACpD+B,QAAS,OACTC,aAAc,OACdC,OAAWjC,EAAL,oBAHW,K,oEC8BZ,MAAMkC,EAAa,gBAAoB,IAiCvC,SAASC,EAAiB1C,GAC/B,MAAM2C,EAAoB,aAAiBF,GAE3C,OAAO,WAAc,IAEO,mBAAfzC,EACFA,EAAW2C,GAGb,IAAIA,KAAsB3C,IAChC,CAAC2C,EAAmB3C","sources":["webpack://homepage/../demo-workspace-1/CONFLUENZA.mdx","webpack://homepage/../gatsby-theme-confluenza/src/templates/markdownTemplate.js","webpack://homepage/./src/components/mdx/ImportingMDXDocuments.mdx","webpack://homepage/./src/components/mdx/WithBorder.js","webpack://homepage/../../node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {WithBorder, ImportingMDXDocuments} from '../homepage/src/components/mdx';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    div: \"div\",\n    blockquote: \"blockquote\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://mdxjs.com\",\n        children: \"MDX\"\n      }), \" allows you to use JSX directly in your Markdown documents.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Imagine, you are documenting a component. Wouldn't it be nice to actually show a working component\\ndirectly in your Markdown document? I mean, not a screenshot, or code snippet, but real rendered\\ncomponent. MDX makes it possible.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Below you see a component that renders its content with a border of the given thickness.\"\n    }), \"\\n\", _jsx(WithBorder, {\n      thickness: 5,\n      children: _jsxs(_components.p, {\n        children: [\"This text should appear in a border \", _jsx(_components.div, {\n          dangerouslySetInnerHTML: {\n            __html: \"<code class=\\\"language-text\\\">5px</code>\"\n          }\n        }), \" thick.\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This component is imported as any other regular react component with:\"\n    }), \"\\n\", _jsx(_components.div, {\n      dangerouslySetInnerHTML: {\n        __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\"><pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> WithBorder<span class=\\\"token punctuation\\\">,</span> ImportingMDXDocuments <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'../homepage/src/components/mdx'</span></code></pre></div>\"\n      }\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"The import statement must be placed directly after \", _jsx(_components.em, {\n          children: \"frontmatter\"\n        }), \" if one is used.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(ImportingMDXDocuments, {}), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"In this file, as an example, we show that you can import React components and other MDX documents\\nfrom any location in your source three. In some cases though, it may be better to keep your \", _jsx(_components.em, {\n          children: \"documentation\"\n        }), \"\\ncomponents in the same workspace.\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/runner/work/confluenza/confluenza/workspaces/demo-workspace-1/CONFLUENZA.mdx\";\nimport '../prismjs/themes/prism-tomorrow.css';\nimport {EditFile} from '@confluenza/confluenza';\nimport {graphql} from 'gatsby';\nconst Template = ({data, children}) => {\n  const {site: {siteMetadata}, doc, mdx} = data;\n  const {editBaseUrl} = siteMetadata;\n  if (mdx) {\n    const {internal: {contentFilePath: fileAbsolutePath}, frontmatter: {title}} = mdx;\n    return React.createElement(\"div\", null, React.createElement(EditFile, {\n      fileAbsolutePath: fileAbsolutePath,\n      editBaseUrl: editBaseUrl\n    }), React.createElement(\"h1\", null, title), children);\n  } else {\n    const {html, fileAbsolutePath, frontmatter: {title, content}} = doc;\n    return React.createElement(\"div\", null, React.createElement(EditFile, {\n      fileAbsolutePath: fileAbsolutePath,\n      externalContent: content,\n      editBaseUrl: editBaseUrl\n    }), React.createElement(\"h1\", null, title), React.createElement(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: content ? content.childMarkdownRemark.html.split('\\n').slice(1).join('\\n') : html\n      }\n    }), content && html !== '' && React.createElement(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: html\n      }\n    }));\n  }\n};\nexport const pageQuery = graphql`\n  query ($templatePath: String!) {\n    site: site {\n      siteMetadata {\n        title\n        editBaseUrl\n      }\n    }\n    config: allConfluenzaYaml(filter: { tag: { ne: null } }) {\n      nodes {\n        tag\n        title\n      }\n    }\n    doc: markdownRemark(frontmatter: { path: { eq: $templatePath } }) {\n      html\n      fileAbsolutePath\n      frontmatter {\n        title\n        content {\n          childMarkdownRemark {\n            html\n            fileAbsolutePath\n          }\n        }\n      }\n    }\n    mdx: mdx(frontmatter: { path: { eq: $templatePath } }) {\n      body\n      frontmatter {\n        title\n      }\n      internal {\n        contentFilePath\n      }\n    }\n  }\n`;\nexport const Head = ({data}) => {\n  const {doc, mdx} = data;\n  return React.createElement(React.Fragment, null, React.createElement(\"title\", null, mdx ? mdx.frontmatter.title : doc.frontmatter.title), React.createElement(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width, initial-scale=1.0, maximum-scale=1.0\"\n  }), React.createElement(\"link\", {\n    href: \"https://fonts.googleapis.com/css?family=Roboto+Mono&display=swap\",\n    rel: \"stylesheet\"\n  }));\n};\nTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Template, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    blockquote: \"blockquote\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"importing-mdx-files\",\n      style: {\n        position: \"relative\"\n      },\n      children: [_jsx(_components.a, {\n        href: \"#importing-mdx-files\",\n        \"aria-label\": \"importing mdx files permalink\",\n        className: \"anchor before\",\n        children: _jsx(_components.div, {\n          dangerouslySetInnerHTML: {\n            __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n          }\n        })\n      }), \"Importing MDX files\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Besides importing components from regular Javascript files, you can also directly import other MDX documents.\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"Currently, Confluenza does not include the headings from the imported MDX files in the navigation menu.\\nThe \", _jsx(_components.em, {\n          children: \"Importing MDX files\"\n        }), \" header above will not show up in the navigation menu.\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import styled from '@emotion/styled'\n\nconst WithBorder = styled.div(({ thickness = 1 }) => ({\n  padding: '25px',\n  marginBottom: '25px',\n  border: `${thickness}px solid black`\n}))\n\nexport { WithBorder }\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","div","blockquote","em","_provideComponents","components","_jsxs","_Fragment","children","_jsx","href","WithBorder","thickness","dangerouslySetInnerHTML","__html","ImportingMDXDocuments","wrapper","MDXLayout","Template","site","siteMetadata","mdx","editBaseUrl","internal","contentFilePath","fileAbsolutePath","frontmatter","title","React","content","externalContent","html","Head","data","doc","name","rel","GatsbyMDXWrapper","h2","id","style","position","className","padding","marginBottom","border","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}