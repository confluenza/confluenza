{"version":3,"sources":["../../source/documentation-layout/DocumentationLayoutSmall.js"],"names":["React","useState","useEffect","DocumentationLayoutGrid","SidebarGridItem","ContentGridItem","Navigation","MenuButton","SiteTitle","FixedNavigation","useScrollResoration","useMobileDocumentNavigator","DocumentationLayoutSmall","children","location","data","onStateChanged","deltas","menuActive","setMenuActive","position","setPosition","grid","setGrid","animationDelay","setAnimationDelay","recordScrollPosition","restoreScrollPosition","disableScrollRestoration","closeMenu","toggleMenu","onNewPathSelected","setTimeout","title","site","siteMetadata","docs","navigation","menuButtonBackgroundImage","file","publicURL","height","left","margin","gridGap","gridTemplateColumns","transition","minWidth","maxWidth","zIndex","bottom","right","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport { DocumentationLayoutGrid, SidebarGridItem, ContentGridItem } from './DocumentationLayoutGrid'\nimport { Navigation } from '../navigation'\nimport { MenuButton } from '../navigation/MenuButton'\nimport { SiteTitle } from './SiteTitle'\n\nimport { FixedNavigation } from './FixedNavigation'\n\nimport { useScrollResoration } from './useScrollRestoration'\nimport { useMobileDocumentNavigator } from './useMobileDocumentNavigator'\n\nconst DocumentationLayoutSmall = ({ children, location, data, onStateChanged, deltas }) => {\n  const [menuActive, setMenuActive] = useState(false)\n  const [position, setPosition] = useState('relative')\n  const [grid, setGrid] = useState('300px 100vw')\n  const [animationDelay, setAnimationDelay] = useState(0)\n\n  const {\n    recordScrollPosition,\n    restoreScrollPosition,\n    disableScrollRestoration\n  } = useScrollResoration()\n\n  const closeMenu = () => {\n    setMenuActive(false)\n    // we will be hiding menu - thus, we need to make sure that\n    // document container is again scrollable before we see it\n    setPosition('relative')\n    setGrid('300px 100vw')\n  }\n\n  // toggleMenu is used to trigger opening menu, and one of\n  // the two triggers to close it (the second closing trigger\n  // is user selecting navigation item). Opening and closing\n  // menu is finalized in the effect below that responds to\n  // the menuActive change.\n  const toggleMenu = () => {\n    if (menuActive) {\n      closeMenu()\n    } else {\n      setMenuActive(true)\n      // record scroll position so that we can restore it if needed\n      recordScrollPosition()\n    }\n    setAnimationDelay(0)\n  }\n\n  // This hook responds to the change of location: the user\n  // selected a link in the navigation menu.\n  useMobileDocumentNavigator({\n    onNewPathSelected: () => {\n      closeMenu()\n      disableScrollRestoration()\n      setAnimationDelay(0.3)\n    },\n    location\n  }, [location])\n\n  useEffect(() => {\n    if (menuActive) {\n      // We do not want to change to 'position: fixed' immediately as\n      // this may be visible and create unpleasant visual effect.\n      // The timeout is about the same as the transition duration in CSS.\n      setTimeout(() => {\n        setPosition('fixed')\n        setGrid('100vw 100vw')\n      }, 200)\n    } else {\n      // Restoring scroll position can only be effective\n      // after position is set back to 'relative'\n      // We have two cases: (1) closing menu is the explicit user\n      // action (by pressing the \"toggle menu\" button) or (2) as\n      // a result of changing location (user selected a new menu item).\n      // In both cases we use the closeMenu function above to trigger\n      // the closing process. We could not restore the scroll possition\n      // right there as this would be too early - the changing from\n      // 'position: fixed' to 'position: relative' needs to be effective\n      // before we can change the scroll position.\n      restoreScrollPosition()\n    }\n  }, [menuActive])\n\n  const { site: { siteMetadata: { title } }, navigation: { docs }, file: { publicURL: menuButtonBackgroundImage } } = data\n  return (<>\n    <DocumentationLayoutGrid css={{\n      position,\n      height: '100vh',\n      left: menuActive ? 0 : '-300px',\n      margin: 0,\n      gridGap: 0,\n      gridTemplateColumns: grid,\n      transition: `all .2s ease-in-out ${animationDelay}s`\n    }}>\n      <SidebarGridItem>\n        <FixedNavigation css={{\n          minWidth: menuActive ? '100vw' : '300px',\n          maxWidth: menuActive ? '100vw' : '300px',\n          transition: `all .2s ease-in-out ${animationDelay}s`,\n          height: '100vh'\n        }}>\n          <SiteTitle title={title} />\n          <Navigation docs={docs} location={location} onStateChanged={onStateChanged} deltas={deltas} />\n        </FixedNavigation>\n      </SidebarGridItem>\n      <ContentGridItem>\n        { children }\n      </ContentGridItem>\n    </DocumentationLayoutGrid>\n    <MenuButton onClick={toggleMenu} backgroundImage={menuButtonBackgroundImage} css={{\n      position: 'fixed',\n      zIndex: 20,\n      bottom: '30px',\n      right: '30px',\n      backgroundColor: menuActive ? '#F486CA' : 'white'\n    }} />\n  </>\n  )\n}\n\nexport { DocumentationLayoutSmall }\n"],"file":"DocumentationLayoutSmall.js"}