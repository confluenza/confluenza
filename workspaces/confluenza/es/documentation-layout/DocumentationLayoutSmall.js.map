{"version":3,"sources":["../../source/documentation-layout/DocumentationLayoutSmall.js"],"names":["React","useState","useEffect","DocumentationLayoutGrid","SidebarGridItem","ContentGridItem","Navigation","MenuButton","SiteTitle","FixedNavigation","useScrollResoration","useMobileDocumentNavigator","DocumentationLayoutSmall","children","location","data","onStateChanged","deltas","rhythm","menuActive","setMenuActive","position","setPosition","grid","setGrid","animationDelay","setAnimationDelay","recordScrollPosition","restoreScrollPosition","disableScrollRestoration","closeMenu","toggleMenu","onNewPathSelected","setTimeout","site","siteMetadata","title","navigationGroups","docs","navigation","menuButtonBackgroundImage","file","publicURL","height","left","margin","gridGap","gridTemplateColumns","transition","minWidth","maxWidth","zIndex","bottom","right","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport { DocumentationLayoutGrid, SidebarGridItem, ContentGridItem } from './DocumentationLayoutGrid'\nimport { Navigation } from '../navigation'\nimport { MenuButton } from '../navigation/MenuButton'\nimport { SiteTitle } from './SiteTitle'\n\nimport { FixedNavigation } from './FixedNavigation'\n\nimport { useScrollResoration } from './useScrollRestoration'\nimport { useMobileDocumentNavigator } from './useMobileDocumentNavigator'\n\nconst DocumentationLayoutSmall = ({ children, location, data, onStateChanged, deltas, rhythm }) => {\n  const [menuActive, setMenuActive] = useState(false)\n  const [position, setPosition] = useState('relative')\n  const [grid, setGrid] = useState('300px 100vw')\n  const [animationDelay, setAnimationDelay] = useState(0)\n\n  const {\n    recordScrollPosition,\n    restoreScrollPosition,\n    disableScrollRestoration\n  } = useScrollResoration()\n\n  const closeMenu = () => {\n    setMenuActive(false)\n    // we will be hiding menu - thus, we need to make sure that\n    // document container is again scrollable before we see it\n    setPosition('relative')\n    setGrid('300px 100vw')\n  }\n\n  // toggleMenu is used to trigger opening menu, and one of\n  // the two triggers to close it (the second closing trigger\n  // is user selecting navigation item). Opening and closing\n  // menu is finalized in the effect below that responds to\n  // the menuActive change.\n  const toggleMenu = () => {\n    if (menuActive) {\n      closeMenu()\n    } else {\n      setMenuActive(true)\n      // record scroll position so that we can restore it if needed\n      recordScrollPosition()\n    }\n    setAnimationDelay(0)\n  }\n\n  // This hook responds to the change of location: the user\n  // selected a link in the navigation menu.\n  useMobileDocumentNavigator({\n    onNewPathSelected: () => {\n      closeMenu()\n      disableScrollRestoration()\n      setAnimationDelay(0.3)\n    },\n    location\n  }, [location])\n\n  useEffect(() => {\n    if (menuActive) {\n      // We do not want to change to 'position: fixed' immediately as\n      // this may be visible and create unpleasant visual effect.\n      // The timeout is about the same as the transition duration in CSS.\n      setTimeout(() => {\n        setPosition('fixed')\n        setGrid('100vw 100vw')\n      }, 200)\n    } else {\n      // Restoring scroll position can only be effective\n      // after position is set back to 'relative'\n      // We have two cases: (1) closing menu is the explicit user\n      // action (by pressing the \"toggle menu\" button) or (2) as\n      // a result of changing location (user selected a new menu item).\n      // In both cases we use the closeMenu function above to trigger\n      // the closing process. We could not restore the scroll possition\n      // right there as this would be too early - the changing from\n      // 'position: fixed' to 'position: relative' needs to be effective\n      // before we can change the scroll position.\n      restoreScrollPosition()\n    }\n  }, [menuActive])\n\n  const { site: { siteMetadata: { title, navigationGroups } }, navigation: { docs }, file: { publicURL: menuButtonBackgroundImage } } = data\n  return (<>\n    <DocumentationLayoutGrid rhythm={rhythm} css={{\n      position,\n      height: '100vh',\n      left: menuActive ? 0 : '-300px',\n      margin: 0,\n      gridGap: 0,\n      gridTemplateColumns: grid,\n      transition: `all .2s ease-in-out ${animationDelay}s`\n    }}>\n      <SidebarGridItem>\n        <FixedNavigation rhythm={rhythm} css={{\n          minWidth: menuActive ? '100vw' : '300px',\n          maxWidth: menuActive ? '100vw' : '300px',\n          transition: `all .2s ease-in-out ${animationDelay}s`,\n          height: '100vh'\n        }}>\n          <SiteTitle title={title} />\n          <Navigation\n            docs={docs}\n            location={location}\n            navigationGroups={navigationGroups}\n            onStateChanged={onStateChanged}\n            deltas={deltas}\n          />\n        </FixedNavigation>\n      </SidebarGridItem>\n      <ContentGridItem>\n        { children }\n      </ContentGridItem>\n    </DocumentationLayoutGrid>\n    <MenuButton onClick={toggleMenu} backgroundImage={menuButtonBackgroundImage} css={{\n      position: 'fixed',\n      zIndex: 20,\n      bottom: '30px',\n      right: '30px',\n      backgroundColor: menuActive ? '#F486CA' : 'white'\n    }} />\n  </>\n  )\n}\n\nexport { DocumentationLayoutSmall }\n"],"file":"DocumentationLayoutSmall.js"}