import _css from "@emotion/css";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState, useEffect } from 'react';
import { DocumentationLayoutGrid, SidebarGridItem, ContentGridItem } from './DocumentationLayoutGrid';
import { Navigation } from '../navigation';
import { MenuButton } from '../navigation/MenuButton';
import { SiteTitle } from './SiteTitle';
import { FixedNavigation } from './FixedNavigation';
import { useScrollResoration } from './useScrollRestoration';
import { useMobileDocumentNavigator } from './useMobileDocumentNavigator';
import { jsx as ___EmotionJSX } from "@emotion/core";

var DocumentationLayoutSmall = function DocumentationLayoutSmall(_ref) {
  var children = _ref.children,
      location = _ref.location,
      data = _ref.data,
      onStateChanged = _ref.onStateChanged,
      deltas = _ref.deltas,
      rhythm = _ref.rhythm;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      menuActive = _useState2[0],
      setMenuActive = _useState2[1];

  var _useState3 = useState('relative'),
      _useState4 = _slicedToArray(_useState3, 2),
      position = _useState4[0],
      setPosition = _useState4[1];

  var _useState5 = useState('300px 100vw'),
      _useState6 = _slicedToArray(_useState5, 2),
      grid = _useState6[0],
      setGrid = _useState6[1];

  var _useState7 = useState(0),
      _useState8 = _slicedToArray(_useState7, 2),
      animationDelay = _useState8[0],
      setAnimationDelay = _useState8[1];

  var _useScrollResoration = useScrollResoration(),
      recordScrollPosition = _useScrollResoration.recordScrollPosition,
      restoreScrollPosition = _useScrollResoration.restoreScrollPosition,
      disableScrollRestoration = _useScrollResoration.disableScrollRestoration;

  var closeMenu = function closeMenu() {
    setMenuActive(false); // we will be hiding menu - thus, we need to make sure that
    // document container is again scrollable before we see it

    setPosition('relative');
    setGrid('300px 100vw');
  }; // toggleMenu is used to trigger opening menu, and one of
  // the two triggers to close it (the second closing trigger
  // is user selecting navigation item). Opening and closing
  // menu is finalized in the effect below that responds to
  // the menuActive change.


  var toggleMenu = function toggleMenu() {
    if (menuActive) {
      closeMenu();
    } else {
      setMenuActive(true); // record scroll position so that we can restore it if needed

      recordScrollPosition();
    }

    setAnimationDelay(0);
  }; // This hook responds to the change of location: the user
  // selected a link in the navigation menu.


  useMobileDocumentNavigator({
    onNewPathSelected: function onNewPathSelected() {
      closeMenu();
      disableScrollRestoration();
      setAnimationDelay(0.3);
    },
    location: location
  }, [location]);
  useEffect(function () {
    if (menuActive) {
      // We do not want to change to 'position: fixed' immediately as
      // this may be visible and create unpleasant visual effect.
      // The timeout is about the same as the transition duration in CSS.
      setTimeout(function () {
        setPosition('fixed');
        setGrid('100vw 100vw');
      }, 200);
    } else {
      // Restoring scroll position can only be effective
      // after position is set back to 'relative'
      // We have two cases: (1) closing menu is the explicit user
      // action (by pressing the "toggle menu" button) or (2) as
      // a result of changing location (user selected a new menu item).
      // In both cases we use the closeMenu function above to trigger
      // the closing process. We could not restore the scroll possition
      // right there as this would be too early - the changing from
      // 'position: fixed' to 'position: relative' needs to be effective
      // before we can change the scroll position.
      restoreScrollPosition();
    }
  }, [menuActive]);
  var title = data.site.siteMetadata.title,
      docs = data.navigation.docs,
      confluenzaConfig = data.config.nodes,
      menuButtonBackgroundImage = data.file.publicURL;
  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(DocumentationLayoutGrid, {
    rhythm: rhythm,
    css:
    /*#__PURE__*/
    _css({
      position: position,
      height: '100vh',
      left: menuActive ? 0 : '-300px',
      margin: 0,
      gridGap: 0,
      gridTemplateColumns: grid,
      transition: "all .2s ease-in-out ".concat(animationDelay, "s")
    }, ";label:DocumentationLayoutSmall;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9kb2N1bWVudGF0aW9uLWxheW91dC9Eb2N1bWVudGF0aW9uTGF5b3V0U21hbGwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUY2QyIsImZpbGUiOiIuLi8uLi9zb3VyY2UvZG9jdW1lbnRhdGlvbi1sYXlvdXQvRG9jdW1lbnRhdGlvbkxheW91dFNtYWxsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgRG9jdW1lbnRhdGlvbkxheW91dEdyaWQsIFNpZGViYXJHcmlkSXRlbSwgQ29udGVudEdyaWRJdGVtIH0gZnJvbSAnLi9Eb2N1bWVudGF0aW9uTGF5b3V0R3JpZCdcbmltcG9ydCB7IE5hdmlnYXRpb24gfSBmcm9tICcuLi9uYXZpZ2F0aW9uJ1xuaW1wb3J0IHsgTWVudUJ1dHRvbiB9IGZyb20gJy4uL25hdmlnYXRpb24vTWVudUJ1dHRvbidcbmltcG9ydCB7IFNpdGVUaXRsZSB9IGZyb20gJy4vU2l0ZVRpdGxlJ1xuXG5pbXBvcnQgeyBGaXhlZE5hdmlnYXRpb24gfSBmcm9tICcuL0ZpeGVkTmF2aWdhdGlvbidcblxuaW1wb3J0IHsgdXNlU2Nyb2xsUmVzb3JhdGlvbiB9IGZyb20gJy4vdXNlU2Nyb2xsUmVzdG9yYXRpb24nXG5pbXBvcnQgeyB1c2VNb2JpbGVEb2N1bWVudE5hdmlnYXRvciB9IGZyb20gJy4vdXNlTW9iaWxlRG9jdW1lbnROYXZpZ2F0b3InXG5cbmNvbnN0IERvY3VtZW50YXRpb25MYXlvdXRTbWFsbCA9ICh7IGNoaWxkcmVuLCBsb2NhdGlvbiwgZGF0YSwgb25TdGF0ZUNoYW5nZWQsIGRlbHRhcywgcmh5dGhtIH0pID0+IHtcbiAgY29uc3QgW21lbnVBY3RpdmUsIHNldE1lbnVBY3RpdmVdID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtwb3NpdGlvbiwgc2V0UG9zaXRpb25dID0gdXNlU3RhdGUoJ3JlbGF0aXZlJylcbiAgY29uc3QgW2dyaWQsIHNldEdyaWRdID0gdXNlU3RhdGUoJzMwMHB4IDEwMHZ3JylcbiAgY29uc3QgW2FuaW1hdGlvbkRlbGF5LCBzZXRBbmltYXRpb25EZWxheV0gPSB1c2VTdGF0ZSgwKVxuXG4gIGNvbnN0IHtcbiAgICByZWNvcmRTY3JvbGxQb3NpdGlvbixcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb24sXG4gICAgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uXG4gIH0gPSB1c2VTY3JvbGxSZXNvcmF0aW9uKClcblxuICBjb25zdCBjbG9zZU1lbnUgPSAoKSA9PiB7XG4gICAgc2V0TWVudUFjdGl2ZShmYWxzZSlcbiAgICAvLyB3ZSB3aWxsIGJlIGhpZGluZyBtZW51IC0gdGh1cywgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdFxuICAgIC8vIGRvY3VtZW50IGNvbnRhaW5lciBpcyBhZ2FpbiBzY3JvbGxhYmxlIGJlZm9yZSB3ZSBzZWUgaXRcbiAgICBzZXRQb3NpdGlvbigncmVsYXRpdmUnKVxuICAgIHNldEdyaWQoJzMwMHB4IDEwMHZ3JylcbiAgfVxuXG4gIC8vIHRvZ2dsZU1lbnUgaXMgdXNlZCB0byB0cmlnZ2VyIG9wZW5pbmcgbWVudSwgYW5kIG9uZSBvZlxuICAvLyB0aGUgdHdvIHRyaWdnZXJzIHRvIGNsb3NlIGl0ICh0aGUgc2Vjb25kIGNsb3NpbmcgdHJpZ2dlclxuICAvLyBpcyB1c2VyIHNlbGVjdGluZyBuYXZpZ2F0aW9uIGl0ZW0pLiBPcGVuaW5nIGFuZCBjbG9zaW5nXG4gIC8vIG1lbnUgaXMgZmluYWxpemVkIGluIHRoZSBlZmZlY3QgYmVsb3cgdGhhdCByZXNwb25kcyB0b1xuICAvLyB0aGUgbWVudUFjdGl2ZSBjaGFuZ2UuXG4gIGNvbnN0IHRvZ2dsZU1lbnUgPSAoKSA9PiB7XG4gICAgaWYgKG1lbnVBY3RpdmUpIHtcbiAgICAgIGNsb3NlTWVudSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNldE1lbnVBY3RpdmUodHJ1ZSlcbiAgICAgIC8vIHJlY29yZCBzY3JvbGwgcG9zaXRpb24gc28gdGhhdCB3ZSBjYW4gcmVzdG9yZSBpdCBpZiBuZWVkZWRcbiAgICAgIHJlY29yZFNjcm9sbFBvc2l0aW9uKClcbiAgICB9XG4gICAgc2V0QW5pbWF0aW9uRGVsYXkoMClcbiAgfVxuXG4gIC8vIFRoaXMgaG9vayByZXNwb25kcyB0byB0aGUgY2hhbmdlIG9mIGxvY2F0aW9uOiB0aGUgdXNlclxuICAvLyBzZWxlY3RlZCBhIGxpbmsgaW4gdGhlIG5hdmlnYXRpb24gbWVudS5cbiAgdXNlTW9iaWxlRG9jdW1lbnROYXZpZ2F0b3Ioe1xuICAgIG9uTmV3UGF0aFNlbGVjdGVkOiAoKSA9PiB7XG4gICAgICBjbG9zZU1lbnUoKVxuICAgICAgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uKClcbiAgICAgIHNldEFuaW1hdGlvbkRlbGF5KDAuMylcbiAgICB9LFxuICAgIGxvY2F0aW9uXG4gIH0sIFtsb2NhdGlvbl0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobWVudUFjdGl2ZSkge1xuICAgICAgLy8gV2UgZG8gbm90IHdhbnQgdG8gY2hhbmdlIHRvICdwb3NpdGlvbjogZml4ZWQnIGltbWVkaWF0ZWx5IGFzXG4gICAgICAvLyB0aGlzIG1heSBiZSB2aXNpYmxlIGFuZCBjcmVhdGUgdW5wbGVhc2FudCB2aXN1YWwgZWZmZWN0LlxuICAgICAgLy8gVGhlIHRpbWVvdXQgaXMgYWJvdXQgdGhlIHNhbWUgYXMgdGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaW4gQ1NTLlxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNldFBvc2l0aW9uKCdmaXhlZCcpXG4gICAgICAgIHNldEdyaWQoJzEwMHZ3IDEwMHZ3JylcbiAgICAgIH0sIDIwMClcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVzdG9yaW5nIHNjcm9sbCBwb3NpdGlvbiBjYW4gb25seSBiZSBlZmZlY3RpdmVcbiAgICAgIC8vIGFmdGVyIHBvc2l0aW9uIGlzIHNldCBiYWNrIHRvICdyZWxhdGl2ZSdcbiAgICAgIC8vIFdlIGhhdmUgdHdvIGNhc2VzOiAoMSkgY2xvc2luZyBtZW51IGlzIHRoZSBleHBsaWNpdCB1c2VyXG4gICAgICAvLyBhY3Rpb24gKGJ5IHByZXNzaW5nIHRoZSBcInRvZ2dsZSBtZW51XCIgYnV0dG9uKSBvciAoMikgYXNcbiAgICAgIC8vIGEgcmVzdWx0IG9mIGNoYW5naW5nIGxvY2F0aW9uICh1c2VyIHNlbGVjdGVkIGEgbmV3IG1lbnUgaXRlbSkuXG4gICAgICAvLyBJbiBib3RoIGNhc2VzIHdlIHVzZSB0aGUgY2xvc2VNZW51IGZ1bmN0aW9uIGFib3ZlIHRvIHRyaWdnZXJcbiAgICAgIC8vIHRoZSBjbG9zaW5nIHByb2Nlc3MuIFdlIGNvdWxkIG5vdCByZXN0b3JlIHRoZSBzY3JvbGwgcG9zc2l0aW9uXG4gICAgICAvLyByaWdodCB0aGVyZSBhcyB0aGlzIHdvdWxkIGJlIHRvbyBlYXJseSAtIHRoZSBjaGFuZ2luZyBmcm9tXG4gICAgICAvLyAncG9zaXRpb246IGZpeGVkJyB0byAncG9zaXRpb246IHJlbGF0aXZlJyBuZWVkcyB0byBiZSBlZmZlY3RpdmVcbiAgICAgIC8vIGJlZm9yZSB3ZSBjYW4gY2hhbmdlIHRoZSBzY3JvbGwgcG9zaXRpb24uXG4gICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb24oKVxuICAgIH1cbiAgfSwgW21lbnVBY3RpdmVdKVxuXG4gIGNvbnN0IHsgc2l0ZTogeyBzaXRlTWV0YWRhdGE6IHsgdGl0bGUgfSB9LCBuYXZpZ2F0aW9uOiB7IGRvY3MgfSwgY29uZmlnOiB7IG5vZGVzOiBjb25mbHVlbnphQ29uZmlnIH0sIGZpbGU6IHsgcHVibGljVVJMOiBtZW51QnV0dG9uQmFja2dyb3VuZEltYWdlIH0gfSA9IGRhdGFcbiAgcmV0dXJuICg8PlxuICAgIDxEb2N1bWVudGF0aW9uTGF5b3V0R3JpZCByaHl0aG09e3JoeXRobX0gY3NzPXt7XG4gICAgICBwb3NpdGlvbixcbiAgICAgIGhlaWdodDogJzEwMHZoJyxcbiAgICAgIGxlZnQ6IG1lbnVBY3RpdmUgPyAwIDogJy0zMDBweCcsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICBncmlkR2FwOiAwLFxuICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogZ3JpZCxcbiAgICAgIHRyYW5zaXRpb246IGBhbGwgLjJzIGVhc2UtaW4tb3V0ICR7YW5pbWF0aW9uRGVsYXl9c2BcbiAgICB9fT5cbiAgICAgIDxTaWRlYmFyR3JpZEl0ZW0+XG4gICAgICAgIDxGaXhlZE5hdmlnYXRpb24gcmh5dGhtPXtyaHl0aG19IGNzcz17e1xuICAgICAgICAgIG1pbldpZHRoOiBtZW51QWN0aXZlID8gJzEwMHZ3JyA6ICczMDBweCcsXG4gICAgICAgICAgbWF4V2lkdGg6IG1lbnVBY3RpdmUgPyAnMTAwdncnIDogJzMwMHB4JyxcbiAgICAgICAgICB0cmFuc2l0aW9uOiBgYWxsIC4ycyBlYXNlLWluLW91dCAke2FuaW1hdGlvbkRlbGF5fXNgLFxuICAgICAgICAgIGhlaWdodDogJzEwMHZoJ1xuICAgICAgICB9fT5cbiAgICAgICAgICA8U2l0ZVRpdGxlIHRpdGxlPXt0aXRsZX0gLz5cbiAgICAgICAgICA8TmF2aWdhdGlvblxuICAgICAgICAgICAgZG9jcz17ZG9jc31cbiAgICAgICAgICAgIGxvY2F0aW9uPXtsb2NhdGlvbn1cbiAgICAgICAgICAgIGNvbmZsdWVuemFDb25maWc9e2NvbmZsdWVuemFDb25maWd9XG4gICAgICAgICAgICBvblN0YXRlQ2hhbmdlZD17b25TdGF0ZUNoYW5nZWR9XG4gICAgICAgICAgICBkZWx0YXM9e2RlbHRhc31cbiAgICAgICAgICAvPlxuICAgICAgICA8L0ZpeGVkTmF2aWdhdGlvbj5cbiAgICAgIDwvU2lkZWJhckdyaWRJdGVtPlxuICAgICAgPENvbnRlbnRHcmlkSXRlbT5cbiAgICAgICAgeyBjaGlsZHJlbiB9XG4gICAgICA8L0NvbnRlbnRHcmlkSXRlbT5cbiAgICA8L0RvY3VtZW50YXRpb25MYXlvdXRHcmlkPlxuICAgIDxNZW51QnV0dG9uIG9uQ2xpY2s9e3RvZ2dsZU1lbnV9IGJhY2tncm91bmRJbWFnZT17bWVudUJ1dHRvbkJhY2tncm91bmRJbWFnZX0gY3NzPXt7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHpJbmRleDogMjAsXG4gICAgICBib3R0b206ICczMHB4JyxcbiAgICAgIHJpZ2h0OiAnMzBweCcsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IG1lbnVBY3RpdmUgPyAnI0Y0ODZDQScgOiAnd2hpdGUnXG4gICAgfX0gLz5cbiAgPC8+XG4gIClcbn1cblxuZXhwb3J0IHsgRG9jdW1lbnRhdGlvbkxheW91dFNtYWxsIH1cbiJdfQ== */"))
  }, ___EmotionJSX(SidebarGridItem, null, ___EmotionJSX(FixedNavigation, {
    rhythm: rhythm,
    css:
    /*#__PURE__*/
    _css({
      minWidth: menuActive ? '100vw' : '300px',
      maxWidth: menuActive ? '100vw' : '300px',
      transition: "all .2s ease-in-out ".concat(animationDelay, "s"),
      height: '100vh'
    }, ";label:DocumentationLayoutSmall;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9kb2N1bWVudGF0aW9uLWxheW91dC9Eb2N1bWVudGF0aW9uTGF5b3V0U21hbGwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0Z5QyIsImZpbGUiOiIuLi8uLi9zb3VyY2UvZG9jdW1lbnRhdGlvbi1sYXlvdXQvRG9jdW1lbnRhdGlvbkxheW91dFNtYWxsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgRG9jdW1lbnRhdGlvbkxheW91dEdyaWQsIFNpZGViYXJHcmlkSXRlbSwgQ29udGVudEdyaWRJdGVtIH0gZnJvbSAnLi9Eb2N1bWVudGF0aW9uTGF5b3V0R3JpZCdcbmltcG9ydCB7IE5hdmlnYXRpb24gfSBmcm9tICcuLi9uYXZpZ2F0aW9uJ1xuaW1wb3J0IHsgTWVudUJ1dHRvbiB9IGZyb20gJy4uL25hdmlnYXRpb24vTWVudUJ1dHRvbidcbmltcG9ydCB7IFNpdGVUaXRsZSB9IGZyb20gJy4vU2l0ZVRpdGxlJ1xuXG5pbXBvcnQgeyBGaXhlZE5hdmlnYXRpb24gfSBmcm9tICcuL0ZpeGVkTmF2aWdhdGlvbidcblxuaW1wb3J0IHsgdXNlU2Nyb2xsUmVzb3JhdGlvbiB9IGZyb20gJy4vdXNlU2Nyb2xsUmVzdG9yYXRpb24nXG5pbXBvcnQgeyB1c2VNb2JpbGVEb2N1bWVudE5hdmlnYXRvciB9IGZyb20gJy4vdXNlTW9iaWxlRG9jdW1lbnROYXZpZ2F0b3InXG5cbmNvbnN0IERvY3VtZW50YXRpb25MYXlvdXRTbWFsbCA9ICh7IGNoaWxkcmVuLCBsb2NhdGlvbiwgZGF0YSwgb25TdGF0ZUNoYW5nZWQsIGRlbHRhcywgcmh5dGhtIH0pID0+IHtcbiAgY29uc3QgW21lbnVBY3RpdmUsIHNldE1lbnVBY3RpdmVdID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtwb3NpdGlvbiwgc2V0UG9zaXRpb25dID0gdXNlU3RhdGUoJ3JlbGF0aXZlJylcbiAgY29uc3QgW2dyaWQsIHNldEdyaWRdID0gdXNlU3RhdGUoJzMwMHB4IDEwMHZ3JylcbiAgY29uc3QgW2FuaW1hdGlvbkRlbGF5LCBzZXRBbmltYXRpb25EZWxheV0gPSB1c2VTdGF0ZSgwKVxuXG4gIGNvbnN0IHtcbiAgICByZWNvcmRTY3JvbGxQb3NpdGlvbixcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb24sXG4gICAgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uXG4gIH0gPSB1c2VTY3JvbGxSZXNvcmF0aW9uKClcblxuICBjb25zdCBjbG9zZU1lbnUgPSAoKSA9PiB7XG4gICAgc2V0TWVudUFjdGl2ZShmYWxzZSlcbiAgICAvLyB3ZSB3aWxsIGJlIGhpZGluZyBtZW51IC0gdGh1cywgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdFxuICAgIC8vIGRvY3VtZW50IGNvbnRhaW5lciBpcyBhZ2FpbiBzY3JvbGxhYmxlIGJlZm9yZSB3ZSBzZWUgaXRcbiAgICBzZXRQb3NpdGlvbigncmVsYXRpdmUnKVxuICAgIHNldEdyaWQoJzMwMHB4IDEwMHZ3JylcbiAgfVxuXG4gIC8vIHRvZ2dsZU1lbnUgaXMgdXNlZCB0byB0cmlnZ2VyIG9wZW5pbmcgbWVudSwgYW5kIG9uZSBvZlxuICAvLyB0aGUgdHdvIHRyaWdnZXJzIHRvIGNsb3NlIGl0ICh0aGUgc2Vjb25kIGNsb3NpbmcgdHJpZ2dlclxuICAvLyBpcyB1c2VyIHNlbGVjdGluZyBuYXZpZ2F0aW9uIGl0ZW0pLiBPcGVuaW5nIGFuZCBjbG9zaW5nXG4gIC8vIG1lbnUgaXMgZmluYWxpemVkIGluIHRoZSBlZmZlY3QgYmVsb3cgdGhhdCByZXNwb25kcyB0b1xuICAvLyB0aGUgbWVudUFjdGl2ZSBjaGFuZ2UuXG4gIGNvbnN0IHRvZ2dsZU1lbnUgPSAoKSA9PiB7XG4gICAgaWYgKG1lbnVBY3RpdmUpIHtcbiAgICAgIGNsb3NlTWVudSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNldE1lbnVBY3RpdmUodHJ1ZSlcbiAgICAgIC8vIHJlY29yZCBzY3JvbGwgcG9zaXRpb24gc28gdGhhdCB3ZSBjYW4gcmVzdG9yZSBpdCBpZiBuZWVkZWRcbiAgICAgIHJlY29yZFNjcm9sbFBvc2l0aW9uKClcbiAgICB9XG4gICAgc2V0QW5pbWF0aW9uRGVsYXkoMClcbiAgfVxuXG4gIC8vIFRoaXMgaG9vayByZXNwb25kcyB0byB0aGUgY2hhbmdlIG9mIGxvY2F0aW9uOiB0aGUgdXNlclxuICAvLyBzZWxlY3RlZCBhIGxpbmsgaW4gdGhlIG5hdmlnYXRpb24gbWVudS5cbiAgdXNlTW9iaWxlRG9jdW1lbnROYXZpZ2F0b3Ioe1xuICAgIG9uTmV3UGF0aFNlbGVjdGVkOiAoKSA9PiB7XG4gICAgICBjbG9zZU1lbnUoKVxuICAgICAgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uKClcbiAgICAgIHNldEFuaW1hdGlvbkRlbGF5KDAuMylcbiAgICB9LFxuICAgIGxvY2F0aW9uXG4gIH0sIFtsb2NhdGlvbl0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobWVudUFjdGl2ZSkge1xuICAgICAgLy8gV2UgZG8gbm90IHdhbnQgdG8gY2hhbmdlIHRvICdwb3NpdGlvbjogZml4ZWQnIGltbWVkaWF0ZWx5IGFzXG4gICAgICAvLyB0aGlzIG1heSBiZSB2aXNpYmxlIGFuZCBjcmVhdGUgdW5wbGVhc2FudCB2aXN1YWwgZWZmZWN0LlxuICAgICAgLy8gVGhlIHRpbWVvdXQgaXMgYWJvdXQgdGhlIHNhbWUgYXMgdGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaW4gQ1NTLlxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNldFBvc2l0aW9uKCdmaXhlZCcpXG4gICAgICAgIHNldEdyaWQoJzEwMHZ3IDEwMHZ3JylcbiAgICAgIH0sIDIwMClcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVzdG9yaW5nIHNjcm9sbCBwb3NpdGlvbiBjYW4gb25seSBiZSBlZmZlY3RpdmVcbiAgICAgIC8vIGFmdGVyIHBvc2l0aW9uIGlzIHNldCBiYWNrIHRvICdyZWxhdGl2ZSdcbiAgICAgIC8vIFdlIGhhdmUgdHdvIGNhc2VzOiAoMSkgY2xvc2luZyBtZW51IGlzIHRoZSBleHBsaWNpdCB1c2VyXG4gICAgICAvLyBhY3Rpb24gKGJ5IHByZXNzaW5nIHRoZSBcInRvZ2dsZSBtZW51XCIgYnV0dG9uKSBvciAoMikgYXNcbiAgICAgIC8vIGEgcmVzdWx0IG9mIGNoYW5naW5nIGxvY2F0aW9uICh1c2VyIHNlbGVjdGVkIGEgbmV3IG1lbnUgaXRlbSkuXG4gICAgICAvLyBJbiBib3RoIGNhc2VzIHdlIHVzZSB0aGUgY2xvc2VNZW51IGZ1bmN0aW9uIGFib3ZlIHRvIHRyaWdnZXJcbiAgICAgIC8vIHRoZSBjbG9zaW5nIHByb2Nlc3MuIFdlIGNvdWxkIG5vdCByZXN0b3JlIHRoZSBzY3JvbGwgcG9zc2l0aW9uXG4gICAgICAvLyByaWdodCB0aGVyZSBhcyB0aGlzIHdvdWxkIGJlIHRvbyBlYXJseSAtIHRoZSBjaGFuZ2luZyBmcm9tXG4gICAgICAvLyAncG9zaXRpb246IGZpeGVkJyB0byAncG9zaXRpb246IHJlbGF0aXZlJyBuZWVkcyB0byBiZSBlZmZlY3RpdmVcbiAgICAgIC8vIGJlZm9yZSB3ZSBjYW4gY2hhbmdlIHRoZSBzY3JvbGwgcG9zaXRpb24uXG4gICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb24oKVxuICAgIH1cbiAgfSwgW21lbnVBY3RpdmVdKVxuXG4gIGNvbnN0IHsgc2l0ZTogeyBzaXRlTWV0YWRhdGE6IHsgdGl0bGUgfSB9LCBuYXZpZ2F0aW9uOiB7IGRvY3MgfSwgY29uZmlnOiB7IG5vZGVzOiBjb25mbHVlbnphQ29uZmlnIH0sIGZpbGU6IHsgcHVibGljVVJMOiBtZW51QnV0dG9uQmFja2dyb3VuZEltYWdlIH0gfSA9IGRhdGFcbiAgcmV0dXJuICg8PlxuICAgIDxEb2N1bWVudGF0aW9uTGF5b3V0R3JpZCByaHl0aG09e3JoeXRobX0gY3NzPXt7XG4gICAgICBwb3NpdGlvbixcbiAgICAgIGhlaWdodDogJzEwMHZoJyxcbiAgICAgIGxlZnQ6IG1lbnVBY3RpdmUgPyAwIDogJy0zMDBweCcsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICBncmlkR2FwOiAwLFxuICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogZ3JpZCxcbiAgICAgIHRyYW5zaXRpb246IGBhbGwgLjJzIGVhc2UtaW4tb3V0ICR7YW5pbWF0aW9uRGVsYXl9c2BcbiAgICB9fT5cbiAgICAgIDxTaWRlYmFyR3JpZEl0ZW0+XG4gICAgICAgIDxGaXhlZE5hdmlnYXRpb24gcmh5dGhtPXtyaHl0aG19IGNzcz17e1xuICAgICAgICAgIG1pbldpZHRoOiBtZW51QWN0aXZlID8gJzEwMHZ3JyA6ICczMDBweCcsXG4gICAgICAgICAgbWF4V2lkdGg6IG1lbnVBY3RpdmUgPyAnMTAwdncnIDogJzMwMHB4JyxcbiAgICAgICAgICB0cmFuc2l0aW9uOiBgYWxsIC4ycyBlYXNlLWluLW91dCAke2FuaW1hdGlvbkRlbGF5fXNgLFxuICAgICAgICAgIGhlaWdodDogJzEwMHZoJ1xuICAgICAgICB9fT5cbiAgICAgICAgICA8U2l0ZVRpdGxlIHRpdGxlPXt0aXRsZX0gLz5cbiAgICAgICAgICA8TmF2aWdhdGlvblxuICAgICAgICAgICAgZG9jcz17ZG9jc31cbiAgICAgICAgICAgIGxvY2F0aW9uPXtsb2NhdGlvbn1cbiAgICAgICAgICAgIGNvbmZsdWVuemFDb25maWc9e2NvbmZsdWVuemFDb25maWd9XG4gICAgICAgICAgICBvblN0YXRlQ2hhbmdlZD17b25TdGF0ZUNoYW5nZWR9XG4gICAgICAgICAgICBkZWx0YXM9e2RlbHRhc31cbiAgICAgICAgICAvPlxuICAgICAgICA8L0ZpeGVkTmF2aWdhdGlvbj5cbiAgICAgIDwvU2lkZWJhckdyaWRJdGVtPlxuICAgICAgPENvbnRlbnRHcmlkSXRlbT5cbiAgICAgICAgeyBjaGlsZHJlbiB9XG4gICAgICA8L0NvbnRlbnRHcmlkSXRlbT5cbiAgICA8L0RvY3VtZW50YXRpb25MYXlvdXRHcmlkPlxuICAgIDxNZW51QnV0dG9uIG9uQ2xpY2s9e3RvZ2dsZU1lbnV9IGJhY2tncm91bmRJbWFnZT17bWVudUJ1dHRvbkJhY2tncm91bmRJbWFnZX0gY3NzPXt7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHpJbmRleDogMjAsXG4gICAgICBib3R0b206ICczMHB4JyxcbiAgICAgIHJpZ2h0OiAnMzBweCcsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IG1lbnVBY3RpdmUgPyAnI0Y0ODZDQScgOiAnd2hpdGUnXG4gICAgfX0gLz5cbiAgPC8+XG4gIClcbn1cblxuZXhwb3J0IHsgRG9jdW1lbnRhdGlvbkxheW91dFNtYWxsIH1cbiJdfQ== */"))
  }, ___EmotionJSX(SiteTitle, {
    title: title
  }), ___EmotionJSX(Navigation, {
    docs: docs,
    location: location,
    confluenzaConfig: confluenzaConfig,
    onStateChanged: onStateChanged,
    deltas: deltas
  }))), ___EmotionJSX(ContentGridItem, null, children)), ___EmotionJSX(MenuButton, {
    onClick: toggleMenu,
    backgroundImage: menuButtonBackgroundImage,
    css:
    /*#__PURE__*/
    _css({
      position: 'fixed',
      zIndex: 20,
      bottom: '30px',
      right: '30px',
      backgroundColor: menuActive ? '#F486CA' : 'white'
    }, ";label:DocumentationLayoutSmall;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9kb2N1bWVudGF0aW9uLWxheW91dC9Eb2N1bWVudGF0aW9uTGF5b3V0U21hbGwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUhpRiIsImZpbGUiOiIuLi8uLi9zb3VyY2UvZG9jdW1lbnRhdGlvbi1sYXlvdXQvRG9jdW1lbnRhdGlvbkxheW91dFNtYWxsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgRG9jdW1lbnRhdGlvbkxheW91dEdyaWQsIFNpZGViYXJHcmlkSXRlbSwgQ29udGVudEdyaWRJdGVtIH0gZnJvbSAnLi9Eb2N1bWVudGF0aW9uTGF5b3V0R3JpZCdcbmltcG9ydCB7IE5hdmlnYXRpb24gfSBmcm9tICcuLi9uYXZpZ2F0aW9uJ1xuaW1wb3J0IHsgTWVudUJ1dHRvbiB9IGZyb20gJy4uL25hdmlnYXRpb24vTWVudUJ1dHRvbidcbmltcG9ydCB7IFNpdGVUaXRsZSB9IGZyb20gJy4vU2l0ZVRpdGxlJ1xuXG5pbXBvcnQgeyBGaXhlZE5hdmlnYXRpb24gfSBmcm9tICcuL0ZpeGVkTmF2aWdhdGlvbidcblxuaW1wb3J0IHsgdXNlU2Nyb2xsUmVzb3JhdGlvbiB9IGZyb20gJy4vdXNlU2Nyb2xsUmVzdG9yYXRpb24nXG5pbXBvcnQgeyB1c2VNb2JpbGVEb2N1bWVudE5hdmlnYXRvciB9IGZyb20gJy4vdXNlTW9iaWxlRG9jdW1lbnROYXZpZ2F0b3InXG5cbmNvbnN0IERvY3VtZW50YXRpb25MYXlvdXRTbWFsbCA9ICh7IGNoaWxkcmVuLCBsb2NhdGlvbiwgZGF0YSwgb25TdGF0ZUNoYW5nZWQsIGRlbHRhcywgcmh5dGhtIH0pID0+IHtcbiAgY29uc3QgW21lbnVBY3RpdmUsIHNldE1lbnVBY3RpdmVdID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtwb3NpdGlvbiwgc2V0UG9zaXRpb25dID0gdXNlU3RhdGUoJ3JlbGF0aXZlJylcbiAgY29uc3QgW2dyaWQsIHNldEdyaWRdID0gdXNlU3RhdGUoJzMwMHB4IDEwMHZ3JylcbiAgY29uc3QgW2FuaW1hdGlvbkRlbGF5LCBzZXRBbmltYXRpb25EZWxheV0gPSB1c2VTdGF0ZSgwKVxuXG4gIGNvbnN0IHtcbiAgICByZWNvcmRTY3JvbGxQb3NpdGlvbixcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb24sXG4gICAgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uXG4gIH0gPSB1c2VTY3JvbGxSZXNvcmF0aW9uKClcblxuICBjb25zdCBjbG9zZU1lbnUgPSAoKSA9PiB7XG4gICAgc2V0TWVudUFjdGl2ZShmYWxzZSlcbiAgICAvLyB3ZSB3aWxsIGJlIGhpZGluZyBtZW51IC0gdGh1cywgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdFxuICAgIC8vIGRvY3VtZW50IGNvbnRhaW5lciBpcyBhZ2FpbiBzY3JvbGxhYmxlIGJlZm9yZSB3ZSBzZWUgaXRcbiAgICBzZXRQb3NpdGlvbigncmVsYXRpdmUnKVxuICAgIHNldEdyaWQoJzMwMHB4IDEwMHZ3JylcbiAgfVxuXG4gIC8vIHRvZ2dsZU1lbnUgaXMgdXNlZCB0byB0cmlnZ2VyIG9wZW5pbmcgbWVudSwgYW5kIG9uZSBvZlxuICAvLyB0aGUgdHdvIHRyaWdnZXJzIHRvIGNsb3NlIGl0ICh0aGUgc2Vjb25kIGNsb3NpbmcgdHJpZ2dlclxuICAvLyBpcyB1c2VyIHNlbGVjdGluZyBuYXZpZ2F0aW9uIGl0ZW0pLiBPcGVuaW5nIGFuZCBjbG9zaW5nXG4gIC8vIG1lbnUgaXMgZmluYWxpemVkIGluIHRoZSBlZmZlY3QgYmVsb3cgdGhhdCByZXNwb25kcyB0b1xuICAvLyB0aGUgbWVudUFjdGl2ZSBjaGFuZ2UuXG4gIGNvbnN0IHRvZ2dsZU1lbnUgPSAoKSA9PiB7XG4gICAgaWYgKG1lbnVBY3RpdmUpIHtcbiAgICAgIGNsb3NlTWVudSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNldE1lbnVBY3RpdmUodHJ1ZSlcbiAgICAgIC8vIHJlY29yZCBzY3JvbGwgcG9zaXRpb24gc28gdGhhdCB3ZSBjYW4gcmVzdG9yZSBpdCBpZiBuZWVkZWRcbiAgICAgIHJlY29yZFNjcm9sbFBvc2l0aW9uKClcbiAgICB9XG4gICAgc2V0QW5pbWF0aW9uRGVsYXkoMClcbiAgfVxuXG4gIC8vIFRoaXMgaG9vayByZXNwb25kcyB0byB0aGUgY2hhbmdlIG9mIGxvY2F0aW9uOiB0aGUgdXNlclxuICAvLyBzZWxlY3RlZCBhIGxpbmsgaW4gdGhlIG5hdmlnYXRpb24gbWVudS5cbiAgdXNlTW9iaWxlRG9jdW1lbnROYXZpZ2F0b3Ioe1xuICAgIG9uTmV3UGF0aFNlbGVjdGVkOiAoKSA9PiB7XG4gICAgICBjbG9zZU1lbnUoKVxuICAgICAgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uKClcbiAgICAgIHNldEFuaW1hdGlvbkRlbGF5KDAuMylcbiAgICB9LFxuICAgIGxvY2F0aW9uXG4gIH0sIFtsb2NhdGlvbl0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobWVudUFjdGl2ZSkge1xuICAgICAgLy8gV2UgZG8gbm90IHdhbnQgdG8gY2hhbmdlIHRvICdwb3NpdGlvbjogZml4ZWQnIGltbWVkaWF0ZWx5IGFzXG4gICAgICAvLyB0aGlzIG1heSBiZSB2aXNpYmxlIGFuZCBjcmVhdGUgdW5wbGVhc2FudCB2aXN1YWwgZWZmZWN0LlxuICAgICAgLy8gVGhlIHRpbWVvdXQgaXMgYWJvdXQgdGhlIHNhbWUgYXMgdGhlIHRyYW5zaXRpb24gZHVyYXRpb24gaW4gQ1NTLlxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNldFBvc2l0aW9uKCdmaXhlZCcpXG4gICAgICAgIHNldEdyaWQoJzEwMHZ3IDEwMHZ3JylcbiAgICAgIH0sIDIwMClcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVzdG9yaW5nIHNjcm9sbCBwb3NpdGlvbiBjYW4gb25seSBiZSBlZmZlY3RpdmVcbiAgICAgIC8vIGFmdGVyIHBvc2l0aW9uIGlzIHNldCBiYWNrIHRvICdyZWxhdGl2ZSdcbiAgICAgIC8vIFdlIGhhdmUgdHdvIGNhc2VzOiAoMSkgY2xvc2luZyBtZW51IGlzIHRoZSBleHBsaWNpdCB1c2VyXG4gICAgICAvLyBhY3Rpb24gKGJ5IHByZXNzaW5nIHRoZSBcInRvZ2dsZSBtZW51XCIgYnV0dG9uKSBvciAoMikgYXNcbiAgICAgIC8vIGEgcmVzdWx0IG9mIGNoYW5naW5nIGxvY2F0aW9uICh1c2VyIHNlbGVjdGVkIGEgbmV3IG1lbnUgaXRlbSkuXG4gICAgICAvLyBJbiBib3RoIGNhc2VzIHdlIHVzZSB0aGUgY2xvc2VNZW51IGZ1bmN0aW9uIGFib3ZlIHRvIHRyaWdnZXJcbiAgICAgIC8vIHRoZSBjbG9zaW5nIHByb2Nlc3MuIFdlIGNvdWxkIG5vdCByZXN0b3JlIHRoZSBzY3JvbGwgcG9zc2l0aW9uXG4gICAgICAvLyByaWdodCB0aGVyZSBhcyB0aGlzIHdvdWxkIGJlIHRvbyBlYXJseSAtIHRoZSBjaGFuZ2luZyBmcm9tXG4gICAgICAvLyAncG9zaXRpb246IGZpeGVkJyB0byAncG9zaXRpb246IHJlbGF0aXZlJyBuZWVkcyB0byBiZSBlZmZlY3RpdmVcbiAgICAgIC8vIGJlZm9yZSB3ZSBjYW4gY2hhbmdlIHRoZSBzY3JvbGwgcG9zaXRpb24uXG4gICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb24oKVxuICAgIH1cbiAgfSwgW21lbnVBY3RpdmVdKVxuXG4gIGNvbnN0IHsgc2l0ZTogeyBzaXRlTWV0YWRhdGE6IHsgdGl0bGUgfSB9LCBuYXZpZ2F0aW9uOiB7IGRvY3MgfSwgY29uZmlnOiB7IG5vZGVzOiBjb25mbHVlbnphQ29uZmlnIH0sIGZpbGU6IHsgcHVibGljVVJMOiBtZW51QnV0dG9uQmFja2dyb3VuZEltYWdlIH0gfSA9IGRhdGFcbiAgcmV0dXJuICg8PlxuICAgIDxEb2N1bWVudGF0aW9uTGF5b3V0R3JpZCByaHl0aG09e3JoeXRobX0gY3NzPXt7XG4gICAgICBwb3NpdGlvbixcbiAgICAgIGhlaWdodDogJzEwMHZoJyxcbiAgICAgIGxlZnQ6IG1lbnVBY3RpdmUgPyAwIDogJy0zMDBweCcsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICBncmlkR2FwOiAwLFxuICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogZ3JpZCxcbiAgICAgIHRyYW5zaXRpb246IGBhbGwgLjJzIGVhc2UtaW4tb3V0ICR7YW5pbWF0aW9uRGVsYXl9c2BcbiAgICB9fT5cbiAgICAgIDxTaWRlYmFyR3JpZEl0ZW0+XG4gICAgICAgIDxGaXhlZE5hdmlnYXRpb24gcmh5dGhtPXtyaHl0aG19IGNzcz17e1xuICAgICAgICAgIG1pbldpZHRoOiBtZW51QWN0aXZlID8gJzEwMHZ3JyA6ICczMDBweCcsXG4gICAgICAgICAgbWF4V2lkdGg6IG1lbnVBY3RpdmUgPyAnMTAwdncnIDogJzMwMHB4JyxcbiAgICAgICAgICB0cmFuc2l0aW9uOiBgYWxsIC4ycyBlYXNlLWluLW91dCAke2FuaW1hdGlvbkRlbGF5fXNgLFxuICAgICAgICAgIGhlaWdodDogJzEwMHZoJ1xuICAgICAgICB9fT5cbiAgICAgICAgICA8U2l0ZVRpdGxlIHRpdGxlPXt0aXRsZX0gLz5cbiAgICAgICAgICA8TmF2aWdhdGlvblxuICAgICAgICAgICAgZG9jcz17ZG9jc31cbiAgICAgICAgICAgIGxvY2F0aW9uPXtsb2NhdGlvbn1cbiAgICAgICAgICAgIGNvbmZsdWVuemFDb25maWc9e2NvbmZsdWVuemFDb25maWd9XG4gICAgICAgICAgICBvblN0YXRlQ2hhbmdlZD17b25TdGF0ZUNoYW5nZWR9XG4gICAgICAgICAgICBkZWx0YXM9e2RlbHRhc31cbiAgICAgICAgICAvPlxuICAgICAgICA8L0ZpeGVkTmF2aWdhdGlvbj5cbiAgICAgIDwvU2lkZWJhckdyaWRJdGVtPlxuICAgICAgPENvbnRlbnRHcmlkSXRlbT5cbiAgICAgICAgeyBjaGlsZHJlbiB9XG4gICAgICA8L0NvbnRlbnRHcmlkSXRlbT5cbiAgICA8L0RvY3VtZW50YXRpb25MYXlvdXRHcmlkPlxuICAgIDxNZW51QnV0dG9uIG9uQ2xpY2s9e3RvZ2dsZU1lbnV9IGJhY2tncm91bmRJbWFnZT17bWVudUJ1dHRvbkJhY2tncm91bmRJbWFnZX0gY3NzPXt7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHpJbmRleDogMjAsXG4gICAgICBib3R0b206ICczMHB4JyxcbiAgICAgIHJpZ2h0OiAnMzBweCcsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IG1lbnVBY3RpdmUgPyAnI0Y0ODZDQScgOiAnd2hpdGUnXG4gICAgfX0gLz5cbiAgPC8+XG4gIClcbn1cblxuZXhwb3J0IHsgRG9jdW1lbnRhdGlvbkxheW91dFNtYWxsIH1cbiJdfQ== */"))
  }));
};

export { DocumentationLayoutSmall };
//# sourceMappingURL=DocumentationLayoutSmall.js.map