{"componentChunkName":"component---gatsby-theme-confluenza-src-templates-markdown-template-js-content-file-path-home-runner-work-confluenza-confluenza-workspaces-homepage-src-pages-users-using-mdx-mdx","path":"/users/mdx/","result":{"data":{"site":{"siteMetadata":{"title":"Confluenza","editBaseUrl":"https://github.com/confluenza/confluenza/blob/master"}},"config":{"nodes":[{"tag":"user","title":"User Documentation"},{"tag":"developer","title":"Developer Documentation"},{"tag":"other","title":"Other Documents"},{"tag":"demo1","title":"Demo Workspace 1"},{"tag":"demo2","title":"Demo Workspace 2"},{"tag":"package","title":"Packages"}]},"doc":null,"mdx":{"body":"\nimport { WithBorder, ImportingMDXDocuments } from \"../../components/mdx\";\n\n[MDX](https://mdxjs.com) allows you to use JSX directly in your Markdown documents.\n\nImagine, you are documenting a component. Wouldn't it be nice to actually show a working component\ndirectly in your Markdown document? I mean, not a screenshot, or code snippet, but real rendered\ncomponent. MDX makes it possible.\n\nBelow you see a component that renders its content with a border of the given thickness.\n\n<WithBorder thickness={5}>\n  This text should appear in a border `5px` thick.\n</WithBorder>\n\nThis component is imported as any other regular react component with:\n\n```javascript\nimport { WithBorder } from \"../../components/mdx\";\n```\n\n> The import statement must be placed directly after _frontmatter_ if one is used.\n\n<ImportingMDXDocuments />\n\n## Enabling MDX support in Confluenza\n\nIn Confluenza, you can use MDX documents the same way you use regular Markdown documents.\nIf you want your MDX document to be visible to Confluenza, just make sure it has a valid\nfrontmatter with a `path`, `title`, and `tag`. For MDX documents, Confluenza does not\nsupport the `content` frontmatter attribute, but you can still import external content\ninto your MDX documents the way we show above by using a regular javascript `import` statement.\n\n## When you do not have any MDX documents\n\nBecause of how Gatsby works, when there are no MDX documents,\nneither MDX nodes nor the corresponding GraphQL types will be created. This will make Gatsby failing.\n\nThere are two solutions: first, make sure you do have MDX content. Just create a _dummy_ MDX document\nwith a frontmatter similar to this one:\n\n```markdown\n---\npath: /dummy\ntitle: Dummy\ntag: dummy\n---\n```\n\nThe values do not relly matter, just make sure they do not conflict with your actual content and that `path`,\n`title`, and `tag` attributes are defined.\n\nAnother approach would be add the following to your site's `gatsby-config.js`:\n\n```javascript\nexports.createSchemaCustomization = ({ actions }) => {\n  const { createTypes, createFieldExtension } = actions;\n  createFieldExtension({\n    name: \"noMdx\",\n    extend: () => ({\n      resolve(source, args, context, info) {\n        if (source[info.fieldName]) {\n          return context.defaultFieldResolver(source, args, context, info);\n        } else {\n          return \"\";\n        }\n      },\n    }),\n  });\n  const typeDefs = `\n    type Mdx implements Node @infer {\n      frontmatter: MdxFrontmatter,\n    }\n    type MdxFrontmatter @infer {\n      title: String @noMdx,\n      path: String @noMdx,\n      tag: String @noMdx\n    }\n  `;\n  createTypes(typeDefs);\n};\n```\n\nHere we basicaly make sure that `Mdx` and `MdxFrontmatter` are defined with `title`, `path`, and `tag`.\n\n> Unfortunatley, we could not just add this to `gatsby-node.js` of the `gatsby-theme-confluenza` package.\n> It would work in a source plugin, but is not allowed in themes.\n\n> You will experience similar problems when your site has MDX but no single Markdown content.\n> This is far less probable that there is no single Markdown document in your source tree,\n> but in such a case, just make sure, you add a dummy Markdown file,\n> or you use a similar hack that we show above working for `Mdx` and `MdxFrontmatter` schema types.\n\n`gatsby-theme-confluenza` also provides an option to disable support for MDX:\n\n```javascript\n{\n  resolve: '@confluenza/gatsby-theme-confluenza',\n  options: {\n    mdx: false\n  }\n}\n```\n\nNotice though that you still\nneed to make sure that `Mdx` and `MdxFrontmatter` schema types are created - so even in the case you turn\nsupport for MDX off, you still need to either use a dummy file, or update the GraphQL schema types in\nyour `gatsby-node.js`.\n\n## EMOJI\n\nConfluenza MDX supports slack-style emoji: :tada:, :heart_eyes_cat:.\n","frontmatter":{"title":"Using MDX in Confluenza"},"internal":{"contentFilePath":"/home/runner/work/confluenza/confluenza/workspaces/homepage/src/pages/users/UsingMDX.mdx"}}},"pageContext":{"templatePath":"/users/mdx","frontmatter":{"path":"/users/mdx","title":"Using MDX in Confluenza","tag":"user","sortIndex":30}}},"staticQueryHashes":["1639663795"],"slicesMap":{}}